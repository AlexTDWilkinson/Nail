// Demonstrate panic and todo functions in if statement branches
// These functions exit the program when called

// Example 1: Using panic in error conditions
user_input:i = 2;  // Change this to test different branches

print(array_join([`Checking user input: `, danger(string_from(user_input))], ``));

result:s = if {
    user_input == 1 => {
        print(`Valid input: processing...`);
        r `Success: processed input 1`;
    },
    user_input == 2 => {
        print(`Invalid input detected!`);
        panic(`User provided invalid input: 2 is not allowed`); // panic exits the program
        r `This will never be reached`;  
    },
    user_input == 3 => {
        print(`Not implemented yet!`);
        todo(`Need to implement handler for input 3`);  // todo exits the program
        r `This will never be reached`; 
    },
    else => {
        print(`Unexpected input!`);
        panic(array_join([`Unexpected input value: `, danger(string_from(user_input))], ``));  // panic exits the program
        r `This will never be reached`; 
    }
};

// This line will only execute if user_input == 1
print(array_join([`Program completed successfully with result: `, result], ``));

// Example 2: Using todo for unimplemented features
feature_flag:s = `new_feature`;

implementation:s = if {
    feature_flag == `old_feature` => {
        r `Using legacy implementation`;
    },
    feature_flag == `new_feature` => {
        todo(`New feature implementation coming soon!`);
        r `placeholder`;  // Never reached
    },
    else => {
        panic(array_join([`Unknown feature flag: `, feature_flag], ``));
        r `placeholder`;  // Never reached
    }
};

// This line will never execute in this example
print(array_join([`Feature result: `, implementation], ``));