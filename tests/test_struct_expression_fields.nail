// Test struct instantiation with expressions in fields

struct Point {
    x_coord:i,
    y_coord:i
}

// Test 1: Simple literals (should work)
p1:Point = Point { x_coord: 10, y_coord: 20 };
print(array_join([`P1: `, danger(string_from(p1.x_coord)), `, `, danger(string_from(p1.y_coord))], ``));

// Test 2: Variables (should work based on test_struct_comprehensive.nail)
x_val:i = 30;
y_val:i = 40;
p2:Point = Point { x_coord: x_val, y_coord: y_val };
print(array_join([`P2: `, danger(string_from(p2.x_coord)), `, `, danger(string_from(p2.y_coord))], ``));

// Test 3: Expressions (this is what fails)
a_val:i = 5;
b_val:i = 6;
// First compute the expressions
x_expr:i = a_val + b_val;
y_expr:i = a_val * b_val;
p3:Point = Point { x_coord: x_expr, y_coord: y_expr };
print(array_join([`P3: `, danger(string_from(p3.x_coord)), `, `, danger(string_from(p3.y_coord))], ``));