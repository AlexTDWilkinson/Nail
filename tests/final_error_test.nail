// Comprehensive error handling test

fn divide(a:i, b:i):i!e {
    if {
        b == 0 => { r e(`Cannot divide by zero`); },
        else => { r a / b; }
    }
}

fn main():v {
    // Test 1: Using dangerous() - will panic if divide returns error
    print(`Test 1: dangerous with valid division`);
    result1:i = dangerous(divide(10, 2));
    print(string_concat([`10 / 2 = `, to_string(result1)]));
    
    // Test 2: Using safe() to handle errors gracefully
    print(`\nTest 2: safe with division by zero`);
    result2:i = safe(divide(10, 0), |err:s|:i { 
        print(string_concat([`Caught error: `, err]));
        r -1;  // Return default value
    });
    print(string_concat([`Result: `, to_string(result2)]));
    
    // Test 3: Chain operations with error handling
    print(`\nTest 3: Chained operations`);
    dividend:i = 20;
    divisor:i = 0;  // This will cause an error
    
    final_result:i = safe(divide(dividend, divisor), |err:s|:i {
        print(string_concat([`Error in calculation: `, err]));
        r 0;
    });
    
    print(string_concat([`Final result: `, to_string(final_result)]));
}