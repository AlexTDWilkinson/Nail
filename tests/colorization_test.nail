// Comprehensive Nail colorization test
// Testing all language features

// Constants and variables
player_name:s = `Grug the Mighty Warrior`;
player_level:i = 25;
player_health:f = 95.5;
is_alive:b = true;

inventory:a:s = [`Sword`, `Shield`, `Potion`, `Scroll`];
stats:a:i = [10, 20, 30, 40, 50];
coordinates:a:f = [1.5, 2.7, 3.14159];

// Math operations
damage:i = player_level * 5;
healing:f = player_health + 10.0;
total_items:i = array_len(inventory);

// String operations
upper_name:s = string_to_uppercase(player_name);
item_list:s = array_join(inventory, `, `);
health_str:s =string_from(player_health);

// Parallel operations
parallel {
    print(`Loading player data...`);
    print(`Connecting to server...`);
    print(`Fetching leaderboard...`);
}

// Function definitions
f calculate_damage(base_damage:i, level:i):i {
   bonus:i = level * 2;
   total:i = base_damage + bonus;
    r total;
}

f process_inventory(items:a:s):s {
   count:i = array_len(items);
   first_item:s = array_get(items, 0);
   result:s = string_concat([`Found `,from(count), ` items. First: `, first_item]);
    r result;
}

// Conditional logic
if {
    player_health > 50.0 => {
        print(`Player is healthy!`);
       bonus_xp:i = 100;
    }
    player_health > 20.0 => {
        print(`Player needs healing!`);
       penalty:i = -50;
    }
    player_health <= 20.0 => {
        print(`Player is critical!`);
       emergency_heal:f = 25.0;
    }
}

// More complex expressions
complex_calc:f = math_sqrt(math_pow(3.0, 2.0) + math_pow(4.0, 2.0));
time_stamp:i = time_now();
formatted_time:s =string_from(time_stamp);

// Array operations
numbers:a:i = [5, 2, 8, 1, 9];
array_sort(numbers);
array_reverse(numbers);
max_num:i = math_max_int(array_get(numbers, 0), array_get(numbers, 1));

// String manipulations
test_string:s = `Hello World 123`;
lowercase:s = string_to_lowercase(test_string);
substring:s = string_substring(test_string, 0, 5);
contains_hello:b = string_contains(test_string, `Hello`);

// More function calls
final_damage:i = calculate_damage(50, player_level);
inventory_summary:s = process_inventory(inventory);

// Final output
print(string_concat([
    `=== Game Status ===\n`,
    `Player: `, upper_name, `\n`,
    `Level: `,from(player_level), `\n`,
    `Health: `, health_str, `\n`,
    `Damage: `,from(final_damage), `\n`,
    `Items: `, inventory_summary, `\n`,
    `Complex Calc: `,from(complex_calc), `\n`,
    `==================`
]));

// Test edge cases with weird formatting
  spaced_var:i=42;
another_var :  i  = 123  ;
print(  `Testing   weird   spacing`  );

// Test comments in various places
test:i = 42; // End of line comment
// Middle comment
test2:i = 24;

/* Multi-line comment test
   This should be colored properly
   Across multiple lines */
after_multiline:s = `test`;