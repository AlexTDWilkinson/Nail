// Welcome to NAIL - Simple, Safe, Parallel Programming!
// Press F7 to compile & run, F6 to toggle theme, F5 to load examples, Ctrl+C to exit
// Use backticks for strings: `like this`

// === STRUCTS - Custom Data Types ===
struct Player {
    player_name:s,
    health:i,
    level:i
}

player:Player = Player {
    player_name: `Hero`,
    health: 100,
    level: 1
};

// === ENUMS - Choice Types ===
enum Status {
    Active,
    Paused,
    Stopped
}

current:Status = Status::Active;

// === ERROR HANDLING - Safe by Default ===
fn divide(num:i, den:i):i!e {
    if {
        den == 0 => { r e(`Cannot divide by zero!`); },
        else => { r num / den; }
    }
}

// Handle errors gracefully with safe()
// safe() is a built-in standard library function that works with any T!e type
result:i = safe(divide(10, 2), |e|:i {
    print(e); // Print the error message
    r 0; // Return default value
});

result_msg:a:s = [`10 / 2 = `, string_from(result)];
print(string_concat(result_msg));

// Use dangerous() when you're certain the operation won't fail (temporary code to be replaced with safe() later)
safe_result:i = dangerous(divide(10, 2)); // Safe because we know 2 != 0

// Use expect() when failure would make the program useless (critical operations)
critical_result:i = expect(divide(100, 10)); // Program can't continue if this fails

// === BASIC TYPES ===
name:s = `Alice`;
age:i = 25;
score:f = 95.7;

// === FUNCTIONS ===
fn greet(person:s):s {
    parts:a:s = [`Hello, `, person, `!`];
    r string_concat(parts);
}

print(greet(name));

// === PARALLEL PROCESSING - Nail's Superpower! ===
p
task1:s = string_from(42);
task2:i = time_now();
fast_calc:i = 100 * 50;
/p
print(string_concat([`Task 1 result: `, task1]));
print(string_concat([`Fast calculation: `, string_from(fast_calc)]));

// === ARRAYS ===
numbers:a:i = [10, 20, 30, 40, 50];
names:a:s = [`Alice`, `Bob`, `Charlie`];

// === FUNCTIONAL OPERATIONS (No loops in Nail!) ===
// Generate a range
nums:a:i = range(1, 5); // [1, 2, 3, 4, 5]

// Helper functions for functional operations
fn double_func(n:i):i { r n * 2; }

fn is_even_func(n:i):b {
    r n % 2 == 0;
}

fn add_func(acc:i, n:i):i { r acc + n; }

fn square_func(n:i):i { r n * n; }

// Map - transform each element
doubled:a:i = map_int(nums, double_func);

// Filter - keep only matching elements
evens:a:i = filter_int(nums, is_even_func);

// Reduce - combine all elements
sum:i = reduce_int(nums, 0, add_func);
sum_msg:a:s = [`Sum 1-5: `, string_from(sum)];
print(string_concat(sum_msg));

// Chain operations - sum of squares
sum_squares:i = reduce_int(
map_int(nums, square_func),
0,
add_func
);
squares_msg:a:s = [`Sum of squares: `, string_from(sum_squares)];
print(string_concat(squares_msg));

// === CONTROL FLOW ===
if {
    current == Status::Active => {
        print(`System is active`);
    },
    else => {
        print(`System inactive`);
    }
}

// More Functions
current_time:i = time_now();
square_root:f = math_sqrt(16.0);

// Print results
print(`Welcome to Nail programming!`);
array_length:i = array_len(numbers);
print(string_from(array_length));
print(string_from(square_root));

// Comments work everywhere!
final_message:s = `Nail makes parallel programming easy!`; // Inline comment

// Ready to code? Clear this and write your own Nail program!
// Try experimenting with structs, enums, and parallel blocks!