// Data Processing Example
// Demonstrates arrays, functional programming, and data manipulation

// Sample data: test scores
scores:a:i = [85, 92, 78, 96, 88, 73, 91, 87, 95, 82];

print(`=== Test Score Analysis ===`);
print(array_join([`Total students: `, danger(string_from(array_len(scores)))], ``));

// Calculate statistics using collection operations
total:i = reduce acc score in scores from 0 {
    y acc + score;
};
average:f = danger(float_from(danger(string_from(total)))) / danger(float_from(danger(string_from(array_len(scores)))));

print(array_join([`Total points: `, danger(string_from(total))], ``));
print(array_join([`Average score: `, danger(string_from(math_round(average)))], ``));

// Filter high performers (90+)
high_scores:a:i = filter score in scores {
    y score >= 90;
};
print(array_join([`Students with 90+: `, danger(string_from(array_len(high_scores)))], ``));

// Grade distribution
grade_a:a:i = filter score in scores {
    y score >= 90;
};
grade_b:a:i = filter score in scores {
    y score >= 80 && score < 90;
};
grade_c:a:i = filter score in scores {
    y score >= 70 && score < 80;
};

print(`\n=== Grade Distribution ===`);
print(array_join([`A grades (90-100): `, danger(string_from(array_len(grade_a)))], ``));
print(array_join([`B grades (80-89): `, danger(string_from(array_len(grade_b)))], ``));
print(array_join([`C grades (70-79): `, danger(string_from(array_len(grade_c)))], ``));

// Apply curve (add 5 points to each score)
curved_scores:a:i = map score in scores {
    y score + 5;
};
print(`\nAfter 5-point curve:`);

// Convert scores to strings for display
curved_strings:a:s = map score in curved_scores {
    y danger(string_from(score));
};
print(array_join(curved_strings, ` `));

// Working with strings
names:a:s = [`Alice`, `Bob`, `Charlie`, `Diana`, `Eve`];
print(`\n=== Student Names ===`);

// Convert to uppercase and add titles
formal_names:a:s = map name in names {
    y array_join([`Student `, string_to_uppercase(name)], ``);
};

// Print each formal name
each name in formal_names {
    print(name);
}

// Check if all students passed (score >= 70)
all_passed:b = all score in scores {
    y score >= 70;
};
print(array_join([`\nAll students passed: `, danger(string_from(all_passed))], ``));

// Find the first perfect score
first_perfect:i = danger(find score in scores {
    y score == 100;
});
print(array_join([`First perfect score: `, danger(string_from(first_perfect))], ``));

// Check if any student got below 75
any_struggling:b = any score in scores {
    y score < 75;
};
print(array_join([`Any students below 75: `, danger(string_from(any_struggling))], ``));