// Comprehensive stdlib test

// Prepare test data
greeting:s = `Hello, World!`;
num:f = 16.0;
v numbers:a:i = [1, 2, 3, 4, 5];
v strings:a:s = [`hello`, `world`, `from`, `nail`];

// String operations
upper:s = string_to_uppercase(greeting);
lower:s = string_to_lowercase(upper);
trimmed:s = string_trim(`  spaces  `);
replaced:s = string_replace(greeting, `World`, `Nail`);
str_len:i = string_len(greeting);
contains_hello:b = string_contains(greeting, `Hello`);

// Math operations
sqrt_val:f = math_sqrt(num);
abs_val:f = math_abs(-5.7);
power:f = math_pow(2.0, 3.0);
rounded:f = math_round(3.7);
floored:f = math_floor(3.7);
ceiled:f = math_ceil(3.2);
min_val:f = math_min(5.0, 3.0);
max_val:f = math_max(5.0, 3.0);
random_val:f = math_random();

// Array operations
arr_len:i = array_len(numbers);
joined:s = array_join(strings, ` `);

// Time operations
now_time:i = time_now();
formatted_time:s = time_format(now_time, `%Y-%m-%d`);

// Type conversions
num_str:s = `42`;
converted_num:i = to_int(num_str);
float_str:s = `3.14`;
converted_float:f = to_float(float_str);
final_str:s =from(converted_num);

// Path operations
joined_path:s = path_join(`/home`, `user`);
path_exists_check:b = path_exists(joined_path);

// Environment
args:a:s = env_args();

// Create final output
v parts:a:s = [upper, ` | `,from(sqrt_val), ` | `, joined, ` | `,from(arr_len)];
output:s = string_concat(parts);

// Print result
print(output);