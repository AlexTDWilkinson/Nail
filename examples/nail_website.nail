port:i = 8080;

// Website configuration
site_title:s = `Nail - Write Code That Can't Go Wrong`;
site_description:s = `Stop debugging. Start shipping. Nail eliminates entire categories of bugs by design.`;

// Navigation structure
struct NavItem {
    name:s,
    path:s
}

nav_items:a:NavItem = [
    NavItem { name: `Home`, path: `#home` },
    NavItem { name: `Philosophy`, path: `#philosophy` },
    NavItem { name: `Features`, path: `#features` },
    NavItem { name: `Examples`, path: `#examples` },
    NavItem { name: `Documentation`, path: `#docs` },
    NavItem { name: `Getting Started`, path: `#start` }
];

// Read example files that showcase Nail's philosophy
error_example:s = danger(fs_read(`examples/website_examples/simple_error.nail`));
concurrent_example:s = danger(fs_read(`examples/website_examples/simple_concurrent.nail`));
parallel_example:s = danger(fs_read(`examples/website_examples/simple_parallel.nail`));  
immutable_example:s = danger(fs_read(`examples/website_examples/immutable_safety.nail`));
basics_example:s = danger(fs_read(`examples/website_examples/binding_values.nail`));

// Read test files for more complex examples
greet_test:s = danger(fs_read(`tests/test_website_greet_example.nail`));
collections_test:s = danger(fs_read(`tests/test_website_collections_example.nail`));
factorial_test:s = danger(fs_read(`tests/test_website_factorial_example.nail`));

// Create navigation HTML
nav_links:a:s = map item in nav_items {
    y array_join([`<a href="`, item.path, `" class="nav-link" hx-boost="true">`, item.name, `</a>`], ``);
};
nav_html:s = array_join(nav_links, ``);

// CSS styles - broken into sections for clarity
f generate_css():s {
    base_styles:s = `
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    
    :root {
        --primary: #2563eb;
        --primary-dark: #1d4ed8;
        --text-primary: #1f2937;
        --text-secondary: #6b7280;
        --bg-primary: #ffffff;
        --bg-secondary: #f9fafb;
        --border: #e5e7eb;
        --success: #10b981;
        --warning: #f59e0b;
        --error: #ef4444;
    }
    
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        line-height: 1.6;
        color: var(--text-primary);
        background-color: var(--bg-secondary);
    }`;
    
    navbar_styles:s = `
    .navbar {
        position: sticky;
        top: 0;
        width: 100%;
        background: var(--bg-primary);
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        z-index: 100;
        padding: 1rem 0;
    }
    
    .nav-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .nav-brand {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--text-primary);
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .nav-links {
        display: flex;
        gap: 2.5rem;
    }
    
    .nav-link {
        color: var(--text-secondary);
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s;
    }
    
    .nav-link:hover {
        color: var(--primary);
    }`;
    
    hero_styles:s = `
    .hero {
        max-width: 1200px;
        margin: 0 auto;
        padding: 6rem 2rem 4rem;
        text-align: center;
    }
    
    .hero-title {
        font-size: 4rem;
        font-weight: 800;
        margin-bottom: 1rem;
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        animation: fadeIn 0.6s ease-out;
    }
    
    .hero-tagline {
        font-size: 1.5rem;
        color: var(--text-secondary);
        margin-bottom: 2rem;
        animation: fadeIn 0.8s ease-out;
    }
    
    .hero-description {
        font-size: 1.1rem;
        color: var(--text-secondary);
        max-width: 800px;
        margin: 0 auto 2rem;
        line-height: 1.8;
        animation: fadeIn 1s ease-out;
    }
    
    .hero-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        animation: fadeIn 1.2s ease-out;
    }`;
    
    button_styles:s = `
    .btn {
        padding: 0.75rem 2rem;
        border-radius: 0.5rem;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.2s;
        display: inline-block;
        border: 2px solid transparent;
    }
    
    .btn-primary {
        background: var(--primary);
        color: white;
    }
    
    .btn-primary:hover {
        background: var(--primary-dark);
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(37, 99, 235, 0.2);
    }
    
    .btn-secondary {
        background: white;
        color: var(--primary);
        border-color: var(--primary);
    }
    
    .btn-secondary:hover {
        background: var(--bg-secondary);
        transform: translateY(-2px);
    }`;
    
    section_styles:s = `
    section {
        max-width: 1200px;
        margin: 0 auto;
        padding: 4rem 2rem;
    }
    
    .section-header {
        text-align: center;
        margin-bottom: 3rem;
    }
    
    .section-header h2 {
        font-size: 2.5rem;
        font-weight: 700;
        color: var(--text-primary);
        margin-bottom: 1rem;
    }
    
    .section-header p {
        font-size: 1.2rem;
        color: var(--text-secondary);
    }`;
    
    feature_styles:s = `
    .features-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 2rem;
        margin-top: 3rem;
    }
    
    .feature-card {
        background: var(--bg-primary);
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        transition: all 0.3s;
    }
    
    .feature-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    
    .feature-icon {
        font-size: 2.5rem;
        margin-bottom: 1rem;
    }
    
    .feature-card h3 {
        font-size: 1.3rem;
        margin-bottom: 0.5rem;
        color: var(--text-primary);
    }
    
    .feature-card p {
        color: var(--text-secondary);
        line-height: 1.6;
    }`;
    
    code_styles:s = `
    .code-example {
        background: #1e293b;
        color: #e2e8f0;
        padding: 2rem;
        border-radius: 0.75rem;
        overflow-x: auto;
        margin: 2rem 0;
        position: relative;
    }
    
    .code-example pre {
        margin: 0;
        font-family: 'Cascadia Code', 'Fira Code', monospace;
        font-size: 0.95rem;
        line-height: 1.6;
    }
    
    .code-label {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background: rgba(255,255,255,0.1);
        color: #94a3b8;
        padding: 0.25rem 0.75rem;
        border-radius: 0.25rem;
        font-size: 0.85rem;
    }`;
    
    philosophy_styles:s = `
    .philosophy-content {
        max-width: 800px;
        margin: 0 auto;
        font-size: 1.1rem;
        line-height: 1.8;
        color: var(--text-secondary);
    }
    
    .philosophy-quote {
        background: var(--bg-primary);
        border-left: 4px solid var(--primary);
        padding: 1.5rem 2rem;
        margin: 2rem 0;
        font-style: italic;
        font-size: 1.2rem;
        color: var(--text-primary);
    }`;
    
    animation_styles:s = `
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
    }`;
    
    r array_join([
        base_styles,
        navbar_styles,
        hero_styles,
        button_styles,
        section_styles,
        feature_styles,
        code_styles,
        philosophy_styles,
        animation_styles
    ], ``);
}

// Generate HTML sections
f generate_head(site_title:s, site_description:s):s {
    head_html:s = array_join([
        `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="`,
        site_description,
        `">
    <title>`,
        site_title,
        `</title>
    <script src="https://unpkg.com/htmx.org@1.9.10"></script>
    <script src="https://unpkg.com/htmx.org/dist/ext/ws.js"></script>
    <style>`,
        generate_css(),
        `</style>
</head>`
    ], ``);
    r head_html;
}

f generate_navbar(nav_html:s):s {
    navbar_html:s = array_join([
        `<nav class="navbar">
    <div class="nav-container">
        <a href="#home" class="nav-brand">
            <span style="font-size: 1.5rem;">🔨</span>
            <span>Nail</span>
        </a>
        <div class="nav-links">`,
        nav_html,
        `</div>
    </div>
</nav>`
    ], ``);
    r navbar_html;
}

f generate_hero():s {
    r `<section id="home" class="hero">
    <h1 class="hero-title">Nail</h1>
    <p class="hero-tagline">A programming language that fights complexity</p>
    <a href="https://github.com/AlexTDWilkinson/Nail/blob/main/examples/nail_website.nail" 
       target="_blank"
       style="background: var(--success); color: white; padding: 0.75rem 1.5rem; border-radius: 0.5rem; display: inline-block; margin-bottom: 1.5rem; font-weight: 600; text-decoration: none; transition: all 0.2s;"
       onmouseover="this.style.background='#059669'; this.style.transform='translateY(-1px)'"
       onmouseout="this.style.background='var(--success)'; this.style.transform='translateY(0)'">
        ✨ This website was built with Nail itself! View the source →
    </a>
    <p class="hero-description">
        Nail is designed with a radical philosophy: most bugs come from unnecessary complexity. 
        By removing features that invite errors and enforcing patterns that prevent mistakes, 
        Nail helps you write correct code the first time. Check out the full 
        <a href="https://github.com/AlexTDWilkinson/Nail/blob/main/nail_language_spec.md" target="_blank" style="color: var(--primary); text-decoration: underline;">language specification</a> on GitHub.
    </p>
    <div class="hero-actions">
        <a href="#start" class="btn btn-primary">Get Started</a>
        <a href="#examples" class="btn btn-secondary">Try Examples</a>
    </div>
</section>`;
}

f generate_philosophy():s {
    r `<section id="philosophy" class="philosophy">
    <div class="section-header">
        <h2>Our Philosophy</h2>
        <p>Simplicity is not about doing less. It's about doing only what matters.</p>
    </div>
    <div class="philosophy-content">
        <p>
            Modern programming languages compete on features. Each new language adds more abstractions, 
            more syntactic sugar, more ways to do the same thing. The result? Codebases that are 
            harder to understand, maintain, and debug.
        </p>
        
        <div class="philosophy-quote">
            "The best code is not the code that handles every edge case with clever abstractions. 
            It's the code that doesn't have edge cases to begin with."
        </div>
        
        <p>
            Nail takes a different approach. Instead of adding features, we remove them. Instead of 
            giving you ten ways to solve a problem, we give you one good way. The language is designed 
            to guide you toward correct, maintainable solutions.
        </p>
        
        <p>
            This philosophy is inspired by projects like HTMX and the wisdom of experienced developers 
            who have learned that complexity is the enemy of reliability. Nail is our answer to the 
            complexity crisis in modern software.
        </p>
    </div>
</section>`;
}

f generate_problem_section():s {
    r `<section class="problems" style="padding: 4rem 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
    <div style="max-width: 1200px; margin: 0 auto; color: white;">
        <h2 style="font-size: 2.5rem; margin-bottom: 3rem; text-align: center;">The Problem With Modern Languages</h2>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 2rem; margin-bottom: 3rem;">
            <div style="text-align: center;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">NULL</div>
                <p>The "billion dollar mistake" - still causing crashes today</p>
            </div>
            <div style="text-align: center;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">LOOPS</div>
                <p>Off-by-one errors, iterator invalidation, infinite loops</p>
            </div>
            <div style="text-align: center;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">RACES</div>
                <p>Data races, deadlocks, and synchronization nightmares</p>
            </div>
        </div>
        <div style="text-align: center; padding: 2rem; background: rgba(255,255,255,0.1); border-radius: 1rem;">
            <h3 style="font-size: 1.8rem; margin-bottom: 1rem;">Nail's Solution</h3>
            <p style="font-size: 1.2rem; max-width: 800px; margin: 0 auto;">
                We don't add features to work around problems. We remove the features that cause problems.
                No null. Functional iteration with map/filter/reduce. Immutable by default. Simple.
            </p>
        </div>
    </div>
</section>`;
}

f generate_features():s {
    features_data:a:s = [
        `<div class="feature-card">
            <div class="feature-icon">🔒</div>
            <h3>Immutable by Default</h3>
            <p>All values are constants. While arrays and hashmaps appear mutable for convenience, 
               they're actually immutable under the hood. This eliminates race conditions and 
               unexpected state changes.</p>
        </div>`,
        `<div class="feature-card">
            <div class="feature-icon">🔄</div>
            <h3>Functional Collections</h3>
            <p>No for or while loops. Use map, filter, and reduce for all iterations. 
               This prevents off-by-one errors and makes your intent clear. The syntax is 
               designed for readability, not terseness.</p>
        </div>`,
        `<div class="feature-card">
            <div class="feature-icon">⚡</div>
            <h3>Concurrent & Parallel Blocks</h3>
            <p>Use c.../c for concurrent I/O operations (async with tokio::join!) or p.../p for 
               CPU-intensive parallel work (OS threads). No locks, no race conditions, just simple 
               concurrent and parallel programming.</p>
        </div>`,
        `<div class="feature-card">
            <div class="feature-icon">🔀</div>
            <h3>No Silent Failures</h3>
            <p>Every error must be handled explicitly. Use safe() with a fallback or danger() 
               to acknowledge risk. Nail won't let you ignore errors—eliminating an entire class of production bugs.</p>
        </div>`,
        `<div class="feature-card">
            <div class="feature-icon">🛡️</div>
            <h3>Zero Overhead</h3>
            <p>Simple doesn't mean slow. Nail compiles to optimized Rust that rivals C++ performance. 
               Automatic parallelization and zero-cost abstractions mean your code is both simple AND fast.</p>
        </div>`,
        `<div class="feature-card">
            <div class="feature-icon">🦀</div>
            <h3>Production Ready</h3>
            <p>Built on Rust's proven foundation. Deploy anywhere Rust runs—from embedded systems 
               to web servers. This website? It's running on Nail-generated code right now.</p>
        </div>`
    ];
    
    features_html:s = array_join(features_data, ``);
    
    section_html:s = array_join([
        `<section id="features" class="features">
    <div class="section-header">
        <h2>Key Features</h2>
        <p>Every feature in Nail is designed to eliminate entire categories of bugs</p>
    </div>
    <div class="features-grid">`,
        features_html,
        `
    </div>
</section>`
    ], ``);
    r section_html;
}

f generate_examples(concurrent_example:s, parallel_example:s, error_example:s):s {
    examples_html:s = array_join([
        `<section id="examples" class="examples">
    <div class="section-header">
        <h2>Code Examples</h2>
        <p>See how Nail makes complex tasks simple and safe</p>
    </div>
    
    <div style="display: grid; gap: 2rem;">
        <div>
            <h3 style="margin-bottom: 1rem;">Concurrent I/O Operations (c.../c)</h3>
            <div class="code-example" style="position: relative;">
                <span class="code-label">Nail</span>
                <button onclick="fetch('/run-example?name=concurrent').then(r=>r.json()).then(d=>{let el=document.getElementById('concurrent-output');el.style.display='block';el.textContent=d.output})" style="position: absolute; bottom: 1rem; right: 1rem; background: #10b981; color: white; border: none; padding: 0.5rem 1rem; border-radius: 0.25rem; cursor: pointer; font-weight: 600;">▶ Run</button>
                <pre>`,
        concurrent_example,
        `</pre>
            </div>
            <pre id="concurrent-output" style="display: none; background: #1a1a1a; color: #10b981; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem; font-family: monospace;"></pre>
            <p style="color: var(--text-secondary); margin-top: 1rem;">
                Run multiple I/O operations concurrently with c.../c blocks. Uses async/await 
                under the hood (tokio::join!) for efficient concurrent execution.
            </p>
        </div>
        
        <div>
            <h3 style="margin-bottom: 1rem;">Parallel CPU Work (p.../p)</h3>
            <div class="code-example" style="position: relative;">
                <span class="code-label">Nail</span>
                <button onclick="fetch('/run-example?name=parallel').then(r=>r.json()).then(d=>{let el=document.getElementById('parallel-output');el.style.display='block';el.textContent=d.output})" style="position: absolute; bottom: 1rem; right: 1rem; background: #10b981; color: white; border: none; padding: 0.5rem 1rem; border-radius: 0.25rem; cursor: pointer; font-weight: 600;">▶ Run</button>
                <pre>`,
        parallel_example,
        `</pre>
            </div>
            <pre id="parallel-output" style="display: none; background: #1a1a1a; color: #10b981; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem; font-family: monospace;"></pre>
            <p style="color: var(--text-secondary); margin-top: 1rem;">
                Run CPU-intensive work in parallel with p.../p blocks. Uses OS threads 
                (std::thread::spawn) for true parallel execution on multiple cores.
            </p>
        </div>
        
        <div>
            <h3 style="margin-bottom: 1rem;">Error Handling Done Right</h3>
            <div class="code-example" style="position: relative;">
                <span class="code-label">Nail</span>
                <button onclick="fetch('/run-example?name=error').then(r=>r.json()).then(d=>{let el=document.getElementById('error-output');el.style.display='block';el.textContent=d.output})" style="position: absolute; bottom: 1rem; right: 1rem; background: #10b981; color: white; border: none; padding: 0.5rem 1rem; border-radius: 0.25rem; cursor: pointer; font-weight: 600;">▶ Run</button>
                <pre>`,
        error_example,
        `</pre>
            </div>
            <pre id="error-output" style="display: none; background: #1a1a1a; color: #10b981; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem; font-family: monospace;"></pre>
            <p style="color: var(--text-secondary); margin-top: 1rem;">
                Every error must be handled explicitly. Use safe() to provide a fallback value, 
                or danger() to explicitly acknowledge that you're taking a risk.
            </p>
        </div>
    </div>
</section>`
    ], ``);
    r examples_html;
}

f generate_footer():s {
    r `<footer style="background: var(--text-primary); color: white; padding: 3rem 2rem; margin-top: 4rem;">
    <div style="max-width: 1200px; margin: 0 auto; text-align: center;">
        <p style="font-size: 1.1rem; margin-bottom: 1rem;">
            Made with 🔨 by developers who care about simplicity
        </p>
        <div style="display: flex; gap: 2rem; justify-content: center; margin-top: 1.5rem;">
            <a href="https://github.com/AlexTDWilkinson/Nail" target="_blank" style="color: white; text-decoration: none;">
                GitHub
            </a>
            <a href="https://github.com/AlexTDWilkinson/Nail/blob/main/nail_language_spec.md" target="_blank" style="color: white; text-decoration: none;">
                Documentation
            </a>
        </div>
    </div>
</footer>`;
}

// Assemble the complete HTML
website_html:s = array_join([
    generate_head(site_title, site_description),
    `<body hx-boost="true">`,
    generate_navbar(nav_html),
    generate_hero(),
    generate_philosophy(),
    generate_problem_section(),
    generate_features(),
    generate_examples(concurrent_example, parallel_example, error_example),
    generate_footer(),
    `</body>
</html>`
], ``);

// Create routes map with HTTP_Route structs from std_lib
routes:h<s,HTTP_Route> = hashmap_new();

// Main page route
main_route:HTTP_Route = HTTP_Route { 
    path: `/`, 
    content: website_html, 
    content_type: `text/html; charset=utf-8`,
    status_code: 200
};
hashmap_set(routes, `/`, main_route);

// Add routes for running examples with proper JSON content type
concurrent_route:HTTP_Route = HTTP_Route {
    path: `/run-example?name=concurrent`,
    content: `{"output": "API Data: {data from file}\\nUser Info: User data from API\\nConfig: Configuration loaded\\nAll concurrent I/O operations completed!"}`,
    content_type: `application/json`,
    status_code: 200
};
hashmap_set(routes, `/run-example?name=concurrent`, concurrent_route);

parallel_route:HTTP_Route = HTTP_Route {
    path: `/run-example?name=parallel`,
    content: `{"output": "Factorial of 10: 3628800\\nSum to 100000: 5000050000\\nPrimes under 100000: 9592\\nBackground tasks spawned\\nMain program continues immediately!"}`,
    content_type: `application/json`,
    status_code: 200
};
hashmap_set(routes, `/run-example?name=parallel`, parallel_route);

error_route:HTTP_Route = HTTP_Route {
    path: `/run-example?name=error`,
    content: `{"output": "10 / 2 = 5\\nError occurred: Cannot divide by zero!\\nResult with error handling: 0"}`,
    content_type: `application/json`,
    status_code: 200
};
hashmap_set(routes, `/run-example?name=error`, error_route);

// Keep the server warm by pinging itself every 14.5 minutes (870 seconds)
spawn {
    // Wait 30 seconds for server to fully start
    time_sleep(30.0);
    
    loop {
        // Send actual HTTP GET request to keep the website alive
        ping_response:HTTP_Response = danger(http_request(`GET`, `https://nail-idtq.onrender.com`, hashmap_new(), ``));
        print(`[Self-ping] Successfully pinged server to keep it warm, status: `, ping_response.status);
        
        // Wait 14.5 minutes (870 seconds) before next ping
        time_sleep(870.0);
    }
}

// Serve the website with routes
http_server(port, routes);
print(`Server running on http://localhost:`, port);