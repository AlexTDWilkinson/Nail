// Example of how iteration works in Nail using the functional array operations
// Example of how iteration works in Nail
// Nail has NO loops, NO recursion - only functional operations
// Note: Nail uses type-specific function names (map_int, filter_int, etc.)

// === FUNCTIONAL ITERATION IN NAIL ===

// Generate a range from 1 to 10
numbers:a:i = range(1, 10);

// Map over the range to double each number
doubled:a:i = map_int(numbers, |n:i|:i { r n * 2; });

// Filter to get only even numbers  
evens:a:i = filter_int(numbers, |n:i|:b { r n % 2 == 0; });

// Reduce to sum all numbers
sum:i = reduce_int(numbers, 0, |acc:i, n:i|:i { r acc + n; });

// Each for side effects (like printing)
each_int(numbers, |n:i|:v {
    print(string_concat([`Number: `, to_string(n)]));
});

// === REGARDING CONTINUOUS PROCESSING ===

// For systems that need continuous processing (like queue consumers),
// Nail would use event-driven or reactive patterns instead of loops:

// Option 1: Event-driven with callbacks
// on_message_received(|message:s|:v {
//     process_message(message);
// });

// Option 2: Stream processing
// message_stream:stream:s = subscribe_to_queue();
// process_stream(message_stream, |message:s|:v {
//     handle_message(message);
// });

// Option 3: Timer-based polling
// poll_every(1000, |:b|:v {  // Poll every 1000ms, return true to continue
//     if {
//         queue_has_messages() => {
//             message:s = read_from_queue();
//             process_message(message);
//             r true;  // Continue polling
//         },
//         else => { r false; }  // Stop polling
//     }
// });

print(`Iteration in Nail is functional, not imperative!`);