// Adventure Game with Array Functions
// Uses array functions and reduce_int for game loop

// Game constants
max_health:i = 100;
max_mana:i = 50;
max_turns:i = 100;

// Initialize game state
health:i = max_health;
mana:i = max_mana;
gold:i = 10;
monsters:i = 0;

// Get player name
print(`Welcome to the Adventure Game!`);
print(`================================\n`);
print(string_concat([`Current Stats: Health=`, string_from(health), ` Mana=`, string_from(mana), ` Gold=`, string_from(gold)]));
player_name:s = dangerous(io_read_line_prompt(`\nEnter your character name: `));


// Helper function to display status
f show_status(h:i, m:i, g:i, mon:i):v {
    print(`\n===== PLAYER STATUS =====`);
    print(string_concat([`Health: `, string_from(h), `/`, string_from(max_health)]));
    print(string_concat([`Mana: `, string_from(m), `/`, string_from(max_mana)]));
    print(string_concat([`Gold: `, string_from(g), ` coins`]));
    print(string_concat([`Monsters Defeated: `, string_from(mon)]));
    print(`=========================\n`);
}

// Create game state array: [health, mana, gold, monsters]
game_state:a:i = [health, mana, gold, monsters];

// Game loop using range
turns:a:i = range(1, max_turns);

// Process each turn
final_state:a:i = reduce_int(turns, game_state, |state:a:i, turn:i|:a:i {
    // Extract current state using array functions
    current_health:i = dangerous(array_get(state, 0));
    current_mana:i = dangerous(array_get(state, 1));
    current_gold:i = dangerous(array_get(state, 2));
    current_monsters:i = dangerous(array_get(state, 3));
    
    // Check if game should end
    if {
        current_health <= 0 => {
            print(`\nüíÄ GAME OVER! You have been defeated!`);
            print(string_concat([`Final Score: `, string_from(current_monsters), ` monsters defeated`]));
            process_exit(0);
        },
        else => { }
    }
    
    // Display turn and status
    print(string_concat([`\n========== TURN `, string_from(turn), ` ==========`]));
    show_status(current_health, current_mana, current_gold, current_monsters);
    
    // Game menu
    print(`What would you like to do?`);
    print(`1. Fight a monster`);
    print(`2. Rest (costs 5 gold)`);
    print(`3. Cast spell (costs 10 mana)`);
    print(`4. Quit game\n`);
    
    choice:s = dangerous(io_read_line_prompt(`Your choice (1-4): `));
    
    // Process choice and return new state
    new_state:a:i = if {
        string_contains(choice, `1`) => {
            print(`\n‚öîÔ∏è  You engage in battle!`);
            damage:i = 15;
            reward:i = 25;
            
            new_health:i = current_health - damage;
            new_gold:i = current_gold + reward;
            new_monsters:i = current_monsters + 1;
            
            print(string_concat([`You defeated a goblin! (+`, string_from(reward), ` gold)`]));
            print(string_concat([`You took `, string_from(damage), ` damage!`]));
            
            r [new_health, current_mana, new_gold, new_monsters];
        },
        string_contains(choice, `2`) => {
            print(`\nüè® You rest at the inn...`);
            
            if {
                current_gold < 5 => {
                    print(`Not enough gold! Rest costs 5 gold.`);
                    r state;
                },
                else => {
                    print(`Health and mana restored! (-5 gold)`);
                    r [max_health, max_mana, current_gold - 5, current_monsters];
                }
            }
        },
        string_contains(choice, `3`) => {
            print(`\n‚ú® You cast a powerful spell!`);
            
            if {
                current_mana < 10 => {
                    print(`Not enough mana! Spell costs 10 MP.`);
                    r state;
                },
                else => {
                    reward:i = 50;
                    print(string_concat([`BOOM! Spell defeats enemies! (+`, string_from(reward), ` gold)`]));
                    r [current_health, current_mana - 10, current_gold + reward, current_monsters + 2];
                }
            }
        },
        string_contains(choice, `4`) => {
            print(`\nThanks for playing!`);
            print(string_concat([`Final Score: `, string_from(current_monsters), ` monsters defeated`]));
            process_exit(0);
        },
        else => {
            print(`\nInvalid choice! Try again.`);
            r state;
        }
    };
    
    r new_state;
});

// Game ended naturally after max turns
print(`\n===== GAME OVER =====`);
print(string_concat([`You survived `, string_from(max_turns), ` turns!`]));
print(string_concat([`Thank you for playing, `, player_name, `!`]));

// Extract and display final stats
final_health:i = dangerous(array_get(final_state, 0));
final_mana:i = dangerous(array_get(final_state, 1));
final_gold:i = dangerous(array_get(final_state, 2));
final_monsters:i = dangerous(array_get(final_state, 3));

print(string_concat([`Final Health: `, string_from(final_health)]));
print(string_concat([`Final Gold: `, string_from(final_gold)]));
print(string_concat([`Monsters Defeated: `, string_from(final_monsters)]));