// Markdown Blog Example in Nail

port:i = 8080;

// Blog post structure
struct BlogPost {
    title:s,
    slug:s,
    date:s,
    content:s
}

// Create blog posts with markdown content
post1_content:s = `# Welcome to Nail: A Language Without Complexity

Nail is a programming language that removes unnecessary complexity while maintaining power and expressiveness. Here's what makes Nail special:

## Key Features

- **No variables** - Everything is immutable by default
- **Collection operations** - Built-in map, filter, reduce, each, find, all, and any keywords
- **Automatic parallelism** - Code runs concurrently without explicit threading
- **Built-in async** - All I/O operations are async by default

## Example Code

Here's a simple example that demonstrates Nail's syntax:

numbers:a:i = [1, 2, 3, 4, 5];
// Using Nail's collection operations
doubled:a:i = map num in numbers {
    y num * 2;
};
sum:i = reduce acc num in doubled from 0 {
    y acc + num;
};
print(sum); // Output: 30

## Why Nail?

1. **Simplicity** - Less syntax to learn, fewer ways to make mistakes
2. **Performance** - Automatic parallelization means faster execution
3. **Safety** - Immutability prevents many common bugs
4. **Modern** - Designed for today's multi-core processors

Start your journey with Nail today and experience programming without the complexity!`;

post1:BlogPost = BlogPost { 
    title: `Welcome to Nail: A Language Without Complexity`, 
    slug: `welcome-to-nail`, 
    date: `2024-01-15`, 
    content: post1_content 
};

post2:BlogPost = BlogPost { title:`Building a Web Server in 10 Lines of Nail`, slug:`web-server-tutorial`, date:`2024-01-20`, content:`# Building a Web Server in 10 Lines of Nail

One of Nail's strengths is how easy it makes common tasks. Let's build a web server!

## The Complete Code

\`\`\`nail
port:i = 3000;
html:s = \`
<!DOCTYPE html>
<html>
<head><title>My Nail Server</title></head>
<body>
    <h1>Hello from Nail!</h1>
    <p>This server was built in just a few lines of code.</p>
</body>
</html>
\`;
http_server_start(port, html);
\`\`\`

That's it! Let's break it down:

## How It Works

1. **Define the port** - We use port 3000
2. **Create HTML content** - Using Nail's multi-line string literals
3. **Start the server** - One function call and you're done!

## Advanced Features

Nail's HTTP library also supports:

- **Routing** - Handle different endpoints
- **JSON APIs** - Parse and return JSON data
- **File serving** - Serve static files
- **WebSockets** - Real-time communication

## Performance

Thanks to Nail's automatic parallelization and Rust backend:
- Handles thousands of concurrent connections
- Sub-millisecond response times
- Efficient memory usage
- Built on battle-tested Axum framework

## Next Steps

Try adding:
- Database connections
- Authentication
- REST API endpoints
- WebSocket support

Happy coding with Nail! üî®` };

// Store posts in array
posts:a:BlogPost = [post1, post2];

// Create HTML page layout
f create_page(title:s, content:s):s {
    html:s = array_join([`
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>`, title, ` - Nail Blog</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1, h2, h3 {
            color: #333;
        }
        h1 {
            border-bottom: 3px solid #0066cc;
            padding-bottom: 10px;
        }
        a {
            color: #0066cc;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
        .post-meta {
            color: #666;
            font-size: 0.9em;
            margin-bottom: 20px;
        }
        .post-list {
            list-style: none;
            padding: 0;
        }
        .post-list li {
            margin-bottom: 20px;
            padding: 20px;
            background: #f9f9f9;
            border-radius: 5px;
        }
        code {
            background: #f4f4f4;
            padding: 2px 5px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
        }
        pre {
            background: #f4f4f4;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
        }
        pre code {
            background: none;
            padding: 0;
        }
        .nav {
            margin-bottom: 30px;
        }
        .nav a {
            margin-right: 15px;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="nav">
            <a href="/">Home</a>
            <a href="/about">About</a>
        </div>
        `, content, `
    </div>
</body>
</html>`], ``);
    r html;
}

// Create index page with list of posts
f create_index(posts:a:BlogPost):s {
    // Generate HTML for each post using map
    post_items:a:s = map post in posts {
        y array_join([`
        <li>
            <h2><a href="/posts/`, post.slug, `">`, post.title, `</a></h2>
            <div class="post-meta">`, post.date, `</div>
        </li>`], ``);
    };
    
    posts_html:s = reduce acc item in post_items from `` {
        y array_join([acc, item], ``);
    };
    
    content:s = array_join([`
        <h1>üî® The Nail Programming Blog</h1>
        <p>Welcome to the official Nail programming language blog. Learn about Nail's unique approach to simplicity and performance.</p>
        <ul class="post-list">`, posts_html, `</ul>`], ``);
    
    page:s = create_page(`Nail Blog`, content);
    r page;
}

// Create individual post page
f create_post_page(post:BlogPost):s {
    // Convert markdown to HTML
    content_html:s = markdown_to_html(post.content);
    
    content:s = array_join([`
        <h1>`, post.title, `</h1>
        <div class="post-meta">Published: `, post.date, `</div>
        `, content_html, `
        <hr>
        <p><a href="/">‚Üê Back to all posts</a></p>
    `], ``);
    
    page:s = create_page(post.title, content);
    r page;
}

// Create about page
about_content:s = `
    <h1>About This Blog</h1>
    <p>This blog is built with Nail, a programming language that prioritizes simplicity without sacrificing power.</p>
    <h2>Features Used</h2>
    <ul>
        <li><strong>HTTP Server</strong> - Built-in web server support</li>
        <li><strong>Markdown Processing</strong> - Convert markdown to HTML</li>
        <li><strong>Collection Operations</strong> - Map, filter, reduce for data processing</li>
        <li><strong>String Manipulation</strong> - Template-like string concatenation</li>
    </ul>
    <p>View the source code to see how simple it is to build a blog in Nail!</p>
`;

about_page:s = create_page(`About`, about_content);

// Generate all pages
index_page:s = create_index(posts);
post1_page:s = create_post_page(post1);
post2_page:s = create_post_page(post2);

// Create router HTML with all pages embedded
router_html:s = array_join([`
<!DOCTYPE html>
<html>
<head>
    <title>Nail Blog Router</title>
    <script>
        // Simple client-side router
        const pages = {
                        '/': index_page,
                        '/posts/welcome-to-nail': post1_page,
                        '/posts/web-server-tutorial': post2_page,
                        '/about': about_page
        };
        
        function navigate(path) {
            const content = pages[path] || pages['/'];
            document.documentElement.innerHTML = content;
            window.history.pushState({}, '', path);
            
            // Re-attach click handlers after updating DOM
            setTimeout(() => {
                document.querySelectorAll('a').forEach(link => {
                    if (link.href.startsWith(window.location.origin)) {
                        link.addEventListener('click', (e) => {
                            e.preventDefault();
                            navigate(new URL(link.href).pathname);
                        });
                    }
                });
            }, 0);
        }
        
        window.addEventListener('popstate', () => {
            navigate(window.location.pathname);
        });
        
        window.addEventListener('load', () => {
            navigate(window.location.pathname);
        });
    </script>
</head>
<body>
    Loading...
</body>
</html>`], ``);

// Start the server
print(`Starting blog server on port `, port, `...`);
http_server_start(port, router_html);