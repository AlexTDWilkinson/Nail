// Simple web server example in Nail

port:i = 3000;
port_string:s = expect(string_from(port));

html_content:s = array_join([`
<!DOCTYPE html>
<html>
<head>
    <title>Nail Web Server</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            max-width: 600px; 
            margin: 50px auto; 
            padding: 20px;
            background-color: #f0f0f0;
        }
        h1 { color: #333; }
        .nail-box {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        code { 
            background: #e0e0e0; 
            padding: 2px 4px; 
            border-radius: 3px;
        }
    </style>
</head>
<body>
    <div class="nail-box">
        <h1>ðŸ”¨ Hello from Nail!</h1>
        <p>This webpage is being served by a Nail program using Axum under the hood.</p>
        <p>The server is running on port <code>`, port_string, `</code></p>
        <p>Nail features demonstrated:</p>
        <ul>
            <li>String interpolation with backticks</li>
            <li>Automatic standard library imports</li>
            <li>Simple HTTP server with one function call</li>
            <li>Collection operations: map, filter, reduce, each, find, all, any</li>
        </ul>
        <p>Grug happy. Complexity bad. Nail good. ðŸŽ‰</p>
    </div>
</body>
</html>
`], ``);

// Demonstrate collection operations in server context
ports:a:i = [3000, 3001, 3002, 3003];

// Check if our port is in the valid range
valid_ports:a:i = filter port_num in ports {
    y port_num >= 3000 && port_num <= 3010;
};
is_valid_port:b = any valid_port in valid_ports {
    y valid_port == port;
};

// Generate port options using map
port_options:a:s = map port_num in valid_ports {
    y array_join([`Port `, string_from(port_num), ` available`], ``);
};

print(`=== Server Configuration ===`);
print(array_join([`Selected port: `, string_from(port)], ``));
print(array_join([`Port is valid: `, string_from(is_valid_port)], ``));
print(`Available ports:`);
each option in port_options {
    print(array_join([`- `, option], ``));
}

// Start the HTTP server
http_server_start(port, html_content);