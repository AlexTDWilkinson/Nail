// Todo List Application in Nail
// Tests: functions, arrays, strings, conditionals, and stdlib functions

// Task priorities as constants
priority_high:i = 3;
priority_medium:i = 2;
priority_low:i = 1;

// Function to format a task with priority
f format_task(task_name:s, priority:i):s {
    priority_text:s = if {
        priority == priority_high => { r `[HIGH]`; },
        priority == priority_medium => { r `[MED] `; },
        priority == priority_low => { r `[LOW] `; },
        else => { r ``; }
    };
    
    formatted:s = string_concat([priority_text, ` `, task_name]);
    r formatted;
}

// Function to calculate task statistics
f calculate_stats(task_count:i, completed_count:i):f {
   total_float:f = dangerous(float_from(string_from(task_count)));
   completed_float:f = dangerous(float_from(string_from(completed_count)));
   percentage:f = math_round(math_max(0.0, completed_float / total_float * 100.0));
    r percentage;
}

// Main program
app_title:s = `=== Nail Todo List Manager ===`;
separator:s = `==============================`;

// Create some tasks
task_one:s = format_task(`Write Nail documentation`, priority_high);
task_two:s = format_task(`Test array functions`, priority_medium);
task_three:s = format_task(`Fix parser bugs`, priority_high);
task_four:s = format_task(`Add more examples`, priority_low);

// Store tasks in arrays
all_tasks:a:s = [task_one, task_two, task_three, task_four];
total_tasks:i = array_len(all_tasks);

// Track completed tasks
completed_tasks:i = 2;
completion_rate:f = calculate_stats(total_tasks, completed_tasks);

// Build output
header:s = string_concat([app_title, `\n`, separator]);
stats_line:s = string_concat([`Total Tasks: `, string_from(total_tasks), ` | Completed: `, string_from(completed_tasks), ` (`, string_from(completion_rate), `%)`]);
task_list:s = array_join(all_tasks, `\n`);
timestamp:s = string_concat([`\nGenerated at: `, string_from(time_now()), ` seconds since epoch`]);

// Create final output
output_parts:a:s = [header, `\n\n`, stats_line, `\n\n`, `Tasks:\n`, task_list, `\n`, separator, timestamp];
final_output:s = string_concat(output_parts);

print(final_output);