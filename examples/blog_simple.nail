// Simple Markdown Blog Example in Nail

port:i = 8080;

// First blog post markdown content
post1_content:s = `# Welcome to Nail: A Language Without Complexity

Nail is a programming language that removes unnecessary complexity while maintaining power and expressiveness. Here's what makes Nail special:

## Key Features

- **No variables** - Everything is immutable by default
- **No loops** - Use functional programming with map, filter, and reduce
- **Automatic parallelism** - Code runs concurrently without explicit threading
- **Built-in async** - All I/O operations are async by default

## Example Code

Here's a simple example that demonstrates Nail's syntax:

    numbers:a:i = [1, 2, 3, 4, 5];
    doubled:a:i = map num in numbers {
        y num * 2;
    };
    sum:i = reduce acc num in doubled from 0 {
        y acc + num;
    };
    print(sum); // Output: 30

## Why Nail?

1. **Simplicity** - Less syntax to learn, fewer ways to make mistakes
2. **Performance** - Automatic parallelization means faster execution
3. **Safety** - Immutability prevents many common bugs
4. **Modern** - Designed for today's multi-core processors

Start your journey with Nail today and experience programming without the complexity!`;

// Second blog post markdown content
post2_content:s = `# Building a Web Server in 10 Lines of Nail

One of Nail's strengths is how easy it makes common tasks. Let's build a web server!

## The Complete Code

\`\`\`nail
port:i = 3000;
html:s = \`
<!DOCTYPE html>
<html>
<head><title>My Nail Server</title></head>
<body>
    <h1>Hello from Nail!</h1>
    <p>This server was built in just a few lines of code.</p>
</body>
</html>
\`;
http_server(port, html);
\`\`\`

That's it! Let's break it down:

## How It Works

1. **Define the port** - We use port 3000
2. **Create HTML content** - Using Nail's multi-line string literals
3. **Start the server** - One function call and you're done!

## Advanced Features

Nail's HTTP library also supports:

- **Routing** - Handle different endpoints
- **JSON APIs** - Parse and return JSON data
- **File serving** - Serve static files
- **WebSockets** - Real-time communication

## Performance

Thanks to Nail's automatic parallelization and Rust backend:
- Handles thousands of concurrent connections
- Sub-millisecond response times
- Efficient memory usage
- Built on battle-tested Axum framework

## Next Steps

Try adding:
- Database connections
- Authentication
- REST API endpoints
- WebSocket support

Happy coding with Nail! ðŸ”¨`;

// Convert markdown to HTML
post1_html:s = markdown_to_html(post1_content);
post2_html:s = markdown_to_html(post2_content);

// Create the blog HTML
blog_html:s = array_join([`
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nail Programming Blog</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1, h2, h3 {
            color: #333;
        }
        h1 {
            border-bottom: 3px solid #0066cc;
            padding-bottom: 10px;
        }
        .post {
            margin-bottom: 60px;
            padding-bottom: 40px;
            border-bottom: 1px solid #eee;
        }
        .post:last-child {
            border-bottom: none;
        }
        .post-meta {
            color: #666;
            font-size: 0.9em;
            margin-bottom: 20px;
        }
        code {
            background: #f4f4f4;
            padding: 2px 5px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
        }
        pre {
            background: #f4f4f4;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
        }
        pre code {
            background: none;
            padding: 0;
        }
        .header {
            text-align: center;
            margin-bottom: 40px;
        }
        a {
            color: #0066cc;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸ”¨ The Nail Programming Blog</h1>
            <p>Learn about Nail's unique approach to simplicity and performance</p>
        </div>
        
        <div class="post">
            <div class="post-meta">Published: January 15, 2025</div>
            `, post1_html, `
        </div>
        
        <div class="post">
            <div class="post-meta">Published: January 20, 2025</div>
            `, post2_html, `
        </div>
        
        <div style="text-align: center; margin-top: 40px; color: #666;">
            <p>Built with Nail - The language without complexity</p>
        </div>
    </div>
</body>
</html>`], ``);

// Start the server
print(`Starting blog server on port `, port, `...`);
http_server(port, blog_html);