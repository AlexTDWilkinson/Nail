// Adventure Game with reduce_struct - 100 turns of automated adventures!
// Demonstrates struct field access and reduce_struct functional programming

struct Player {
    name:s,
    health:i,
    gold:i,
    turn:i
}

struct Event {
    turn:i,
    description:s,
    health_change:i,
    gold_change:i
}

// Game constants
max_health:i = 100;
initial_gold:i = 10;

print(`Welcome to the 100-Turn Adventure Game!`);
print(`========================================\n`);

// Get player name
player_name:s = dangerous(io_read_line_prompt(`Enter your character name: `));

// Create initial player
initial_player:Player = Player {
    name: player_name,
    health: max_health,
    gold: initial_gold,
    turn: 0
};

// Create array of 10 events that will be processed 10 times each (100 turns total)
all_events:a:Event = [
    Event { turn: 1, description: `You encounter a goblin! Fight and earn 20 gold but lose 10 health.`, health_change: -10, gold_change: 20 },
    Event { turn: 2, description: `You find a treasure chest! Gain 30 gold.`, health_change: 0, gold_change: 30 },
    Event { turn: 3, description: `A friendly healer restores 15 health.`, health_change: 15, gold_change: 0 },
    Event { turn: 4, description: `You fall into a trap! Lose 5 health.`, health_change: -5, gold_change: 0 },
    Event { turn: 5, description: `You trade with a merchant for 25 gold.`, health_change: 0, gold_change: 25 },
    Event { turn: 6, description: `Bandits attack! Lose 8 health but gain 15 gold.`, health_change: -8, gold_change: 15 },
    Event { turn: 7, description: `You rest at an inn. Restore 20 health.`, health_change: 20, gold_change: 0 },
    Event { turn: 8, description: `You find rare herbs! Gain 10 health and 5 gold.`, health_change: 10, gold_change: 5 },
    Event { turn: 9, description: `A dragon appears! Lose 25 health but gain 100 gold.`, health_change: -25, gold_change: 100 },
    Event { turn: 10, description: `You discover a magic fountain! Restore to full health.`, health_change: 100, gold_change: 0 }
];

print(string_concat([`\nWelcome, `, initial_player.name, `! Starting your 100-turn adventure...\n`]));
print(string_concat([`Starting Health: `, string_from(initial_player.health)]));
print(string_concat([`Starting Gold: `, string_from(initial_player.gold), `\n`]));

// Use reduce_struct to process all events and evolve the player
final_player:Player = reduce_struct(all_events, initial_player, |acc:Player, event:Event|:Player {
    // Calculate new health (cap at max_health, minimum 1)
    new_health:i = if {
        acc.health + event.health_change > max_health => { max_health; },
        acc.health + event.health_change < 1 => { 1; },
        else => { acc.health + event.health_change; }
    };
    
    // Calculate new gold (minimum 0)
    new_gold:i = if {
        acc.gold + event.gold_change < 0 => { 0; },
        else => { acc.gold + event.gold_change; }
    };
    
    // Create new player state
    current_name:s = acc.name;
    current_turn:i = acc.turn + 1;
    
    updated_player:Player = Player {
        name: current_name,
        health: new_health,
        gold: new_gold,
        turn: current_turn
    };
    
    // Print turn summary every 10 turns
    should_print:b = (acc.turn + 1) % 10 == 0;
    if {
        should_print => {
            print(string_concat([`Turn `, string_from(acc.turn + 1), `: `, event.description]));
            print(string_concat([`  Health: `, string_from(new_health), `, Gold: `, string_from(new_gold)]));
        },
        else => { }
    };
    
    r updated_player;
});

// Final results
print(`\n========================================`);
print(`🏆 ADVENTURE COMPLETE! 🏆`);
print(`========================================`);
print(string_concat([`Hero: `, final_player.name]));
print(string_concat([`Survived: `, string_from(final_player.turn), ` turns`]));
print(string_concat([`Final Health: `, string_from(final_player.health), `/`, string_from(max_health)]));
print(string_concat([`Final Gold: `, string_from(final_player.gold), ` coins`]));

// Determine success level based on final stats
final_health:i = final_player.health;
final_gold:i = final_player.gold;

success_message:s = if {
    final_health >= 80 => {
        if {
            final_gold >= 1000 => { `LEGENDARY HERO! Outstanding adventure!`; },
            else => { `GREAT HERO! Excellent health!`; }
        };
    },
    final_health >= 50 => {
        if {
            final_gold >= 500 => { `GREAT HERO! Excellent job surviving!`; },
            else => { `GOOD HERO! Nice job!`; }
        };
    },
    final_health >= 20 => { `BRAVE HERO! Good effort!`; },
    else => { `BARELY SURVIVED! Better luck next time!`; }
};

print(success_message);
print(`\nThanks for playing the 100-Turn Adventure Game!`);